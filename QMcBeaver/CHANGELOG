Fri, Nov 14 Amos Anderson
1.  You can now optimize UU, DD, or UD Jastrows independently. I found this was critical for getting good Jastrows
    in triplet methylene.

2.  I've systematized some of the walker branching code, but it's still being tested. What I just uploaded is better than before,
    but I'm not entirely satisfied yet.

3.  I changed QMCManager so that the trial energy is changed during equilibration. I was seeing that even an energy with a high
    error worked better than whatever SCF energy was used.

Wed, Sep 24 Daniel R Fisher
1.  Changed the way checkpoint files are read so that it is possible
    to start a DMC calculation from a VMC checkpoint.  This allows the
    user to break the equilibration of a DMC calculation into two
    parts.  

Thurs, Sep 4 Daniel R Fisher
1.  Fixed the gamess2qmcbeaver.py script to handle trial functions 
    with more than 100 basis functions.

Wed, Sep 3, 2008 Amos Anderson
1.  I discovered a bug the other day, dating back about 5.5 years, that has affected every ckmf file produced using
    jaguar2qmcbeaver.py or gamess2qmcbeaver.py. Essentially, 6 of the 10 f basis functions functions were not given
    the correct normalization constant, and this was corrected in gamess2qmcbeaver.py on Jul 10, 2008. I didn't notice
    that I had corrected it until yesterday when I noticed that recent calculations were not matching older calculations.
    Today, Dan pointed out further discrepancies, by which we discovered that in my Jul 10 changes, I had changed the
    order of the basis functions. I fixed this problem, and now jaguar2qmcbeaver and gamess2qmcbeaver should be working
    correctly now.

****The practical upshot of all of this is that (assuming you used those scripts) all calculations up to this point
    have been flawed, and need to be redone. Well, actually, it was giving good results *before* this correction, so maybe
    you don't want to redo your calculations.

Tue, Sep 2, 2008 Amos Anderson
1.  I added new timing system, designed to look at the cost of evaluating each part of the wavefunction.
    Throughout the code, there are functions called aggregateTimers, which will collect Stopwatch objects,
    and percolate them up to QMCManager, for a report at the end of a run. To do this, I added a new function
    Stopwatch::lap(), which helps obtain an average time for something measured repeatedly. The percentages
    should add to 100%. If they go higher, then that's because one of the contributions is being overweighted.

2.  I monkeyed around in QMCDerivativeProperties to help stabilize the measurment of effdt when there's
    not a lot of data available.

3.  I added some ceilings for optimization steps. While we're optimizing L, it will not increase the number of
    steps to be higher than 50,000. If we're not optimizing L, then the ceiling is 500,000 iterations. I also
    added a simple trigger in QMcBeaver such that if the code thinks the optimization has sufficiently converged,
    it can turn off the L optimization on its own.

4.  I sorted the printing of flags in QMCFlags, so that the more useful ones are collected at the top.
    Further, I changed the usage of the "use_three_body_jastrow" flag so that it is no longer an input flag.
    Instead, the code will look to see if you entered any 3 body jastrows in the ckmf file, and if you did, then
    the flag will be activated.

5.  I signficantly improved the warning reporting in QMCWalker. The goal is to get as close a look as possible
    at walkers that go bad.

6.  I've improved the CI coefficient constraint code. That is, you can constrain one of the coefficients to be
    some constaint times one of the other coefficients during optimization. I haven't uploaded scripts that
    automatically add the constraints to the ckmf file yet, but QMcBeaver itself can do it. The format is that
    instead of a float for a CI coefficient, you enter "c N f" where N is the index of the independent CI coefficent,
    and f is the constant value. For example, a open-shell singlet (2 determinants) might look like:
    # WF = anti[12(ab - ba)] = anti[(12 + 21)ab] = anti[12ab] + anti[21ab]
    Alpha:
    1 0
    0 1
    Beta:
    0 1
    1 0
    CI coeffs:
    1.0
    c 0 1.0 

7.  I made some changes in Polynomial relating to how the terms are evaluated during optimization. Previously,
    it would call pow(x,n) for each term to be optimized (super inefficient), but now it evaluates them all
    together, and puts the results in an array. This *significantly* speeds up the optimization of 2 particle
    Jastrows!!

Mon, Jul 14,2008 Amos Anderson
1.  I chose better default flags in QMCFlags.cpp.
2.  I uploaded the modifications I made to orbital optimation. You now have the option
    that if the coefficient was a zero in the input file, it will remain fixed to zero. This
    can eliminate a lot of parameters.
3.  I upgraded FixedCuspPade Jastrows, so that it is now general enough to include any Pade type
    Jastrow with a polynomial in the numerator and denominator. You can pick the first n terms in the
    numerator and the first d terms in the denominator to be fixed. Pade jastrow is obsolete now, I'll
    remove it eventually. ZeroCorelation is also obsolete.

Tue, Jul 8, 2008 Amos Anderson
1.  I turned off cusp replacement for atoms with pseudopotentials. They
    don't have cusps.
2.  I fixed the spelling for pseudo.

Mon, Jul 7, 2008 Daniel R Fisher
1.  Updated QMCDansWalkerInitialization to work with the new
    pseudopotential code.

Thu, Jul 3, 2008 Amos Anderson
1.  I commited all my psuedopotential code, and added a new test for the test directory.
    The code is not quite complete, we're still waiting for Dan to finish modifying his
    initialization code so that it can handle the whole periodic table. I'm worried that
    there are ways to do things faster that i haven't found yet... Known issues are:

    a) For WF optimization, we are ignoring these psuedopotentials. Is this a problem?
    It's like we're optimizing the kinetic energy, and hope it's minima is the same as
    for the total energy. It seems to be producing acceptable results, so I won't worry
    for now. 

    b) How large a grid is necessary? I'm using different grids than the other papers mention
    because I assume that Lebedev-Laikov grids are better. I'm ignoring their discussion of
    "randomly rotating" the grids to eliminate bias. They said large enough grids are less biased
    anyway.

    c) I haven't done whatever modifications for DMC are necessary yet.

2.  There are a bunch of other minor changes I made. For example, I added getNumberOrbitals(bool)
    and getNumberElectrons(bool) and changed other parts of the code accordingly.

3.  To evaluate psuedopotentials, I added a new function to all parts of the wavefunction. This function
    evaluates the value of the contribution only, and none of the derivatives.

Wed, Jul 2, 2008 Amos Anderson
1.  I fixed a bug which prevented the obsolete QMCReadAndEvaluateConfigs from working.
    The problem was in QMCJastrow.evaluate(R). We rely on the QMCWalkerData being here,
    but it wasn't being initialized.

2.  I added all my stuff to jaguar2qmcbeaver.py. It uses menu selection to choose
    a ckmft file to facilitate creating an input file.

3.  I added some recent changes to summary.pl. I wanted it to compare the energies for the VMC
    and SCF energies, if available.

4.  I added some tinkering I did to the eigenvector optimization method. Basically, i limit
    iteration increases to 500,000, and choose better a_diag values for the correlated sampling.

Sat, Jun 28, 2008 Amos Anderson
1.  I figured out a way to speed up basis function evaluation in QMCBasisFunction.cpp .
    The code is more messy, but examples/ne0.ckmf goes twice as fast now. The most benefit
    is for contracted and augmented basis sets. Basically, I eliminated the use of the pow
    function by precalculating all of the x^a y^b z^c, and minimized the usage of the exp function.

Tue, May 20, 2008 Amos Anderson
1.  I have some wavefunctions with many parameters that have been quite expensive
    to optimize, so changed some things so they run much faster now. I monkeyed with
    QMCSlater::calculate_Derivatives so that it runs slighly faster. I also
    switched the hess and der data structures in QMCPropertyArrays to be double,
    and not QMCStatistic, and this saved a lot of computational effort. Further,
    QMCWalker now accumulates statistics for der and hess directly without worrying
    about averaging each timestep first. My wave function with ~500 parameters
    optimizes about 5.5 times faster.

Mon, May 12, 2008 Amos Anderson
1.  I updated all the changes I'd been collecting for a while. If you
    want the old version, then look at the apr9_2008_stable tag.

2.  I've added Umrigar's accelerated metropolis method from 1993. However,
    it is most effective when updating one electron per iteration, and
    I don't have all the parameter derivatives updatable one electron at
    a time. So the method is not much use at the moment, if you are optimizing
    wavefunctions. However, if you set a dt of about 0.1, then you'll get
    about the same efficiency anyway.

3.  I changed the names of many wavefunction related variables in SCFJastrow
    and Slater. I think the names make more sense now. This also includes replacing
    the name QMCGreensRatioComponent with QMCDouble and QMCFutureWalkingProperties with
    QMCPropertyArrays.

4.  I added some new 2 particle Jastrows, but they don't represent much of an improvement, so
    I stopped working on them. They're probably unstable.

5.  I changed the output format so that more information is available. In VMC it is now:
 iteration            Eavg            Estd    Num. Samples           Tcorr      Acceptance         <p dR2>     Sample Var.         Summary
    and in DMC it is now:
 iteration            Eavg            Estd    Num. Samples           Tcorr      Acceptance    Num. Walkers         Weights    Trial Energy         Eff. dt

6.  I added a couple of performance improvements, especially focusing on the one-electron
    updates. Als, calculation of CI parameter derivatives is much more efficient for > 100 coeffiecients.

7.  In the mean time, the code can now efficiently move one electron at a time;
    it just can't calculate parameter derivatives efficiently. I plan to add
    this eventually, and then perhaps Umrigar's accelerated metropolis method 
    will be more of an improvement.

8.  I added a way to constrain CI coefficients during optimization. It's very primitive.

9.  Stopwatch has a new function: lap which is useful for timing something that is repeated.

Wed, May 7, 2008 Daniel R Fisher
1.  Made the redistribution of electrons in
    QMCDansWalkerInitialization to avoid charged atoms a bit more
    aggressive.  It was having trouble initializing O3 triplet
    molecules.

Thurs, April 24, 2008 Daniel R Fisher
1.  Fixed a problem in QMCDerivativeProperties.  If there are no
    samples in the QMCProperties, it divides by zero when it tries to
    calculate the effective time step.

Fri, April 18, 2008 Daniel R Fisher
1.  Fixed a problem in QMCDansWalkerInitialization that was causing a
    segmentation fault when the ensemble was randomly initialized
    during the run.
2.  I made a small change in the way walkers are reweighted in
    QMCWalker.  In a DMC run, the walkers are not reweighted for the
    first 500 iterations, which should allow them a few accepted moves
    before diffusion starts.

Tues, April 15, 2008 Daniel R Fisher
1.  I fixed a few problems that were happening when DMC runs were
    being restarted from checkpoints.  The ensemble was not being
    synchronized, which was making the run crash.  I also added the
    correction divisor queue to the checkpoint.

Wed, March 26, 2008 Daniel R Fisher
1.  I fixed a problem with the gamess2qmcbeaver.py script.  It was not
    extracting the basis set properly when symmetry was used in the
    geometry.  

Fri, Feb 29, 2008 Amos Anderson
1.  I added some better example files.
2.  I committed some changes relating to problems on the ALC machine. If you're
    using an older MPICH, then the MPI datatypes might be slightly different. Look at
    QMCProperties and QMCProperty for details.
3.  I added a method to check whether a QMcBeaver executable produces results that match
    reference data. I've started making some input files in the test directory to help
    verify that results aren't changing. This section needs more work, but this is a start.
    It makes it a lot easier to do debugging, too... :-)

Mon, Feb 25, 2008 Amos Anderson
1.  I added a new, unified submission script, qmcsub.py. I merged everything from the qsub,
    bsub, and llnl qmcbeaverrun.py scripts so that now it's much easier to make
    changes and let everybody benefit. The reason for doing this was that all the scripts
    needed to be changed to reflect the new directory handling, so instead of updating all of them,
    I merged them. It should be easier to add new machines.

2.  I fixed a bug relating to the way determinants are updated. In QMCSlater, there is a part where
    we use Array2D::inverseUpdateOneColumn to avoid recalculating the entire determinant when multiple
    determinants are used. The bug was that sometimes sequential determinants used the same orbital, but
    in different positions. This meant that there was a possibility that the same orbital (temporarily) showed
    up twice in the same determinant, resulting in a linear dependency.

Wed, Feb 20, 2008 Amos Anderson
1.  I changed the way checkpoints are handled. Previously, QMcBeaver was responsible
    for creating the subdirectory to place the checkpoints into. Now, it will look
    in temp_dir/checkpoint_input_name for the location of checkpoints to read in, and
    it will write checkpoints into the temp_dir/checkout_file_name directory.

    Typically, checkpoint_input_name is the name of the run that generated checkpoint files.
    So if I ran a calculation called start.ckmf, then it would be a good idea to set
	checkout_file_name = start
    Then when I run start.01.ckmf,
	checkin_file_name = start
	checkout_file_name = start.01
    etc.

    The problem with the previous set up was that it was taking too long to write checkpoints
    on some systems when accessing checkout_file_name meant communication over a network. It still
    makes sense to store checkpoint files in the working directory along with the .out etc files,
    but we need to actually write checkpoints in a scratch directory which has faster access time.

    The difference now is that we expect the batch script to handle copying the old checkpoint files
    into the temp_dir at the start of the run, and then copying the new checkpoint files back to
    the working directory at the end of the calculation. I've modified bsubqmcbeaverrun.py to
    do this, and it seems to work well on Coyote. bsubqmcbeaverrun.py needs to be told
    where the scratch directories are, and then it will actually modify the ckmf file.

Thu, Feb 14, 2008 Amos Anderson
1.  I "fixed" the way multiple determinants are handled by QMCSlater.
    Instead of making N determinants, and multiplying all of them individually,
    the code will now only separate the data into individual determinants
    after matrix multiplication. The addition of determinants now has a much
    smaller impact on run time.

Wed, Feb 6, 2008 Amos Anderson
1.  I eliminated all the "unused variable" warnings.

2.  QMCProperty includes the correlation length in printAll

Fri, Feb 1, 2008 Daniel R Fisher
1.  I changed the way that gamess2qmcbeaver.py gets the basis function
    and wavefunction parameters.  The old script was not working when
    there was more than 100 contracted basis functions.

Thu, Jan 17, 2008 Amos Anderson
1.  I fixed a bug that occurred when optimizing ci coefficients. I was
    getting sets of ci coefficients where all of them were zero, this
    was causing problems when update_SCF divides by the wavefunction.

2.  I fixed a minor bug preventing QMCEigenSearch from looking at the correct
    energies when deciding whether to increase the number of steps.

3.  I set QMCThreeBodyCorrelationFunctionParameters to use Dan's
    gaussianParamDepMatrix whenever we're not reproducing NE && EE
    Jastrows with NEE. The regular method was not producing a
    matrix.

Fri, Jan 11, 2008 Amos Anderson
1.  I uploaded all the scripts I've been working on. They'll plot
    jastrows and convergence data. Unfortunately, I haven't bothered
    with documenting them too carefully. The ones that actually plot
    something require gnuplot 4.3.

Tue, Dec 18, 2007 Amos Anderson
1.  I changed all the function calls to fortran libraries so that the calls
    are routed through a macro in cppblas.h. Some machines need an underscore
    after the function name, others don't, so you'll have to manually toggle this
    in order to compile on machines like AIX.

Mon, Dec 17, 2007 Amos Anderson
1.  I added skewness and kurtosis to the statistics gathering. It doesn't
    appear to add significant expense to calculations, and the results seem
    interesting.

2.  Restart ckmf files will preserve all comments from parent ckmf file.
    Also, the code will add some data about the optimization to the restart file.
    My intent is to embed some data into the restart file containing info about
    the wavefunction. This is important to know which calculations are supposed
    to represent different or the same calculation, so the optimization energy
    is supposed to represent a wavefunction ID.

3.  I added a new file, bin/ckmf.pl. This script helps you examine a bunch of ckmf
    files at once.

Thu, Dec 13, 2007 Daniel R Fisher
1.  I added the option to include write only the energy data to
    checkpoint files.  This makes the files much smaller and preserves the
    data that is important for weighting, branching, and the equilibration
    array.
2.  I changed the objective function in QMCEquilibrationArray.  This
    class now stores the statistics for the first ten thousand samples for
    each set of properties and uses them to determine when the run has
    equilibrated.

Wed, Nov 28, 2007 Daniel R Fisher
1.  Fixed a bug in QMCWalker.  When a walker was read in from a
    checkpoint file, the distances in QMCWalkerData were not updated,
    so QMCFunctions could not evaluate the configuration.

Sun, Nov 11, 2007 Daniel R Fisher
1.  Fixed a memory leak in CambridgeThreeBodyJastrow.  Arrays for
    powers of the distances and other temp variables were being
    allocated and not deleted.  This was a problem for optimization
    runs because several Jastrows are created and evaluated at once.
2.  Changed the objective function in QMCEquilibrationArray.

Wed, Nov 7, 2007 Amos Anderson
1.  I improved the performance of the 3 body jastrow parameter derivative calculations.
    In QMCThreeBodyJastrow::packageDerivatives, the code will accumulate some of the
    derivative data and apply the totalDerivativesToFree on the accumulated data, instead
    of each entry individually.

Mon, Nov 5, 2007 Amos Anderson
1.  I improved the performance of the 3 body jastrow calculations. I used a wide variety
    of tricks, and for my test input file (which is mostly correlated sampling), the code
    runs at 40-50% faster. There's no difference in the energies.

    There was a *very* slight numerical difference in the results (8th
    decimal place) for the correlated sampling energies. The derivatives themselves
    differ in the 14th place. However, I think this difference is negligible.

Mon, Oct 29, 2007 Amos Anderson
1.  I changed the way Jastrows are read in. Old input files are still compatible.
    Now you do not have to include Jastrow functions that will not be used. I added
    a parameter link_NEE_Jastrows, which is analogous to link_Jastrow_parameters.
    Setting link_NEE_Jastrows = 2 will use the same jastrow for NEupEdn, NEupEup,
    and NEdnEdn, setting link_NEE_Jastrows = 1 will set NEdnEdn = NEupEup,
    and link_NEE_Jastrows = 0 will use separate functions for all 3.

Fri, Oct 26, 2007 Daniel R Fisher
1.  Fixed a bug in QMCElectronNucleusCusp.  The function that fits the
    exponential to the Gaussian orbital was having problems when the
    gradient of the original orbital near the nucleus did not match its
    overall shape.  For example, if an orbital was overall decreasing
    between the radius of correction and the nucleus but had a negative
    gradient at the nucleus, the fit orbital would not satisfy the cusp
    condition.  Orbitals like this are very rare and have very little
    density at the nucleus in question, so this problem was not very
    important.  I fixed the problem by requiring that the radius of
    correction always be placed in a region where the shape of the
    original orbital matches its gradient near the origin.   

Thu, Oct 25, 2007 Amos Anderson
1.  I realized that Array2D was not accounting for permutations when
    using dgesv to calculate determinants. This resulted in spurious nodes,
    a problem which would affect fixed-node error.

Wed, Oct 3, 2007 Amos Anderson
1.  I added the ability to optimize the cutoff parameter to the 3 body
    Jastrow. Note that the cutoff parameter is counted as a free parameter,
    even if it's not actually optimized.
2.  I added the ability to choose which terms in the 3 body Jastrow we want
    to optimize. You'll have to modify the code if you want to choose differently.
    If you don't run a 3 3 or 4 4 with all possible terms included,
    then it won't work, currently.
3.  I changed the ordering of the 3 body terms in the input file. Old 3 body parameters
    are completely incompatable. However, once you've optimized a 3 3 function, then you
    can easily upgrade it to a 4 4 function, just change the NeN and Nee numbers.

Mon, Sep 17, 2007 Amos Anderson
1.  I added correlated sampling -- the real way. It doesn't require
    anything written to file. This is useful for choosing good
    a_diag values. So set a_diag to something negative, and the
    code will automatically choose a stable a_diag using correlated sampling.

    This only applies to the eigenvector optimization method. The others
    could be added if I get bored.

2.  I changed the parameter for optimizing Jastrow cutoffs so that the
    same parameter is referenced by all Cambridge jastrows.

Wed, Sep 12, 2007 Daniel R Fisher
1.  I changed the way that data is reduced in QMCManager to make sure
    that the timing data is collected and written out when a
    calculation terminates unexpectedly.  Previously this was not
    being done and all the times were zeros.

2.  I fixed a bug in QMCWalker::moveElectronsU93ImpSampling().  If the
    configuration was read in from a checkpoint file, the
    electron-nuclear distances were not filled in yet in
    QMCWalkerData, so it was dividing by zero when it tried to move
    the electrons.

Tues, Sep 11, 2007 Daniel R Fisher
1.  I improved the makeParamDepMatrix() function in
    QMCThreeBodyCorrelationFunctionParameters.  It has a much more
    rigorous check to make sure that all dependent parameters are
    defined in terms of free parameters only.

Thu, Sep 6, 2007 Amos Anderson
1.  Code will now allow the setting of "ksi" from input file.

Tue, Sep 4, 2007 Amos Anderson
1.  I changed the code to use BLAS by default instead of CBLAS. This
    makes it easier to compile on systems where CBLAS is difficult to get,
    since BLAS is more common than CBLAS.

2.  I changed configure.py so that it knows about GotoBLAS, which appears
    to be faster than ATLAS, but does not bundle CBLAS.

Sat, Sep 1, 2007 Amos Anderson
1.  I fixed a bug in the Cambridge jastrows.

2.  I added parameter derivatives to the 3 particle jastrows, i think
    everything is optimizing correctly.

3.  I added a function in Array1D to make it easier to read arrays
    from the input file. Specifically, you don't have to type something
    for all the parameters in the input file, the function will read
    as many as available, and initialize the rest to some chosen value.

Tues, Aug 28, 2007 Daniel R Fisher
1.  I replaced the way that the symmetry and cusp conditions are
    enforced in QMCThreeBodyJastrowParameters with a matrix.  It is
    faster and more elegant to enforce the cusps and symmetry this
    way.  The transpose of the matrix should be useful for calculating
    derivatives of quantities with respect to the free parameters.  

Mon, Aug 27, 2007 Daniel R Fisher
1.  I revised the way that the free parameters are determined in the
    new class QMCThreeBodyJastrowParameters.  All of the parameters
    that are dependent due to cusp conditions are now excluded from the
    free parameter array, which should make optimization easier.

Sat, Aug 25, 2007 Daniel R Fisher
1.  I added three body Jastrow functions to the code.  They are
    identical to the function 'f' described in Physical Review B 70,
    235119 by the CASINO people.

Wed, Aug 20, 2007 Amos Anderson
1.  I added two new 2 particle Jastrow functions, based on the most
    recent publications from the CHAMP and CASINO people. They
    both work better than the Pade Jastrows. However, both are difficult
    to optimize.

2.  I added some performance metrics to the output.

3.  I also included numerous other small improvements and bug fixes.
    For example, there was a bug compelling the user to optimize both
    EE and EN Jastrows at the same time.

Mon, Jul 23, 2007 Amos Anderson
1.  I added an option, one_e_per_iter, which will allow you to move
    one electron at a time. I'm not completely sure I'm handling the
    green's function, reweighting, branching, etc correctly, but it
    might be ok.

2.  I added the energy minimization criteria, "generalized_eigenvector".
    It's a bit unstable at the moment (the optimization might be slow), but
    it's expected to be fairly efficient. That is, with the "Linearize"
    step length, it might converge your parameters in 1 or 2 optimization steps.

3.  In order to move one electron at a time, I programmed Array2D.h to use the
    special inverse update algorithm.

4.  Array2D.h is programmed to use the fortran bindings in LAPACK instead of
    the ATLAS bindings. This should make it more portable. This includes the
    generalized eigenvalue solver. Eventually, perhaps I'll use fortran bindings
    for BLAS as well, which will facilitate the use of alternative machines where
    compiling ATLAS is tough.

    Along these lines, Array2D's determinant_and_inverse will no longer calculate the
    **transpose** of the inverse, but the inverse directly. I changed all the places in the
    code which took the transposition into account.

5.  I reorganized a lot of QMCSlater.cpp in order to move one electron at a time.
    I think it looks a lot cleaner now. The GPU code was not changed, so I expect minor
    adjustements to be necessary when moving all electrons at once, and major adjustments
    when moving one electron at a time.

6.  I fixed a bug preventing the user from during off the "limit_branching" option.

7.  I changed the default for "rel_cutoff" to 100. The previous default value of 5 was too
    small. It turns out that the distribution outside of the 5 range is still asymetric.

    Using rel_cutoff is equivalent to marking a configuration as singular, so it won't be added
    to the average. A lower rel_cutoff will lower your variance significantly. However, you
    can't make it so small that the data not included is asymetric wrt the average value.

Tue, Jul 17, 2007 Daniel R Fisher
1.  Fixed a bug that Amos found in QMCElectronNucleusCusp.  The z component
    of the gradient was not passed by reference, which means its values may 
    not have been replaced by the cusp replacement procedure.

Tue, Jul 3, 2007 Amos Anderson
1.  I uploaded the version of gamess2qmcbeaver.py that i've been
    keeping in my private stash. Basically, it can get GVB wavefunctions,
    write some interesting info into the ckmf files, and use ckmft files.

    A ckmft file is a ckmf template file. When you run the gamess2qmcbeaver.py
    script, it will look for any .ckmft files and use one of them for the
    parameters. I loaded an example, optimize.ckmft representing the parameters
    that I currently think work best for optimization.

Sun, Jul 1, 2007 Daniel R Fisher
1.  I changed the way that checkpoint files are written and read.
    Restarting calculations from checkpoints has been a problem on
    QSC, so I put in many checks to be sure the read is successful.
    If it is not, the walkers are randomly initialized.
2.  I changed the objective function in QMCEquilibrationArray.  This
    is still subject to testing and will probably be changed again, but
    this function gives much better results than the old one did.
3.  I changed a few things about equilibration in QMCManger so that
    calculations can be restarted from checkpoint files.

Thu, Jun 27, 2007 Amos Anderson
1.  There was a problem in orbital optimization when there were
    many orbitals. Mainly, the hessian was unnecessarily stored
    in QMCEquilibrationArray, which stores 30 copies of QMCProperties,
    causing the code to request ~ gigabytes of memory.
    To fix this, I moved the der and hess variables over to
    QMCFutureWalkingProperties, along with chiDensity, so that
    all the vector properties are in one place. This eliminates
    the weird MPI reduction bug relating to vector properties being
    inside of QMCProperties. QMCFutureWalkingProperties should be renamed
    something like "QMCArrayProperties".
    Additionally, for the derivatives, the data is now stored as
    sizeof(QMCStatistic) = 32 instead of sizeof(QMCProperty) = 1560.

Wed, Jun 27, 2007 Amos Anderson
1.  I fixed a minor bug that I added in QMCWalker.cpp. It was
    a seg fault whenever running w/o optimization.
2.  I added my QMCSurfer code.

Wed, Jun 27, 2007 Amos Anderson
1.  The code can now optimize orbital coefficients. It can be a
    bit expensive, but I'm not sure how much.
2.  We can now selectively optimize different parts of the
    wavefunction. For now, I'll leave it to the "automatic"
    optimization method to decide how to exploit this. I changed
    several function names to make it clear how optimizable parameters
    are related.
3.  I changed all references in QMCManager of Input to
    globalInput. Eventually, all the code should use this
    global variable because we don't want to change something
    in globalInput that some parts of the code can't see because
    they are looking at their local copy.
4.  QMCSlater and QMCSCFJastrow are cleaned up a bit. For example,
    QMCSlater doesn't hold wavefunction coefficients anymore.
    Several of the function calls now return useful data even when
    it has 0 electrons, so QMCSCFJastrow doesn't have to check.
5.  I cleaned out the formatting for writing restart files, as well
    as formatting the writeEnergyResultsSummary. I think they are
    a lot easier to read by humans now.
6.  I changed a number of things about QMCWavefunction. For example,
    I merged the previous AlphaCoeffs and BetaCoeffs into OrbitalCoeffs,
    a single data structure to store the orbitals. I added several functions
    in QMCWavefunction to manipulate the data structures to facilitate
    different ways to optimize orbital coefficients, related to how the
    orbitals are linked together.

Thu, Jun 7, 2007 Amos Anderson
1.  The optimization code crashed when nbeta = 0, so I patched
    it up.
2.  I added some better error reporting for when the input file
    is read. I got tired of the code simply crashing with no explanation
    when there was some problem with the Jastrow functions. Hopefully,
    it will report a more helpful error.
3.  I made the optimziation a bit more robust. For example, when choosing
    a new set of parameters to try, previously it would simply quit
    if the new parameters had a relevant singularity. Now, it will
    modify the hessian so it takes a more careful step. See
    QMCCorrelatedSamplingVMCOptimization.cpp for details.

Wed, May 23, 2007 Amos Anderson
1.  I added parameter derviatives. I'm using the formulas for
    variance minimization provided in PRL 94, 150201 (2005).
    There are many advantages to this, but the primary ones are:
    a) we don't have to write configurations to file anymore
    b) the derivatives are more accurate because they're analytic
    c) we have an acceptable hessian

    WF optimization actually works now. I think... I'm seeing
    variance drop by at least a factor of 2 from the default
    parameter settings.

    There were some corresponding API changes as well.

2)  CI coefficents are optimized too. Since the WF is invariant
    to multiplication by a value, there are NDET-1 additional
    parameters we can optimize.

3)  I cleaned up QMCLineSearch.cpp and related classes.

4)  I added a new optimize_Psi_method, "automatic". It is my intention
    that when perfected, it will be essentially blackbox, and the best
    choice. It follows most of the recommendations from the PRL paper,
    except I don't have an easy way to calculate eigenvalues, so it doesn't
    follow all recommendations.

    See the test/lih_opt_test.ckmf for a sample input file.

5)  I cleaned up a bunch of the other code, including QMcBeaver.cpp,
    Array2D.h, QMCManager.cpp...

Sat, May 5, 2007 Amos Anderson
1.  I added HDF5 capabilities. Unfortunately, it doesn't appear
    to be much of a performance benefit on top of system binary.
    Although, it should make a big difference if writing over a
    network...

    Maybe I just haven't tuned it well enough...

Tue, Apr 24, 2007 Amos Anderson
1.  I fixed a bug that prevented the optimization parts of the code
    from working. The issue was that we printed the trial configurations
    and not the accepted configurations. To fix this, we need to
    print configurations in QMCWalker, not QMCSCFJastrow. This problem
    appears to have been introduced by myself, sorry.
    I also added a weight variable to the printed configurations,
    which brings the configuration energy closer to what was calculated.
2.  I improved the CKGeneticAlgorithm1 a lot. Now it will sort all
    available results, and keep all the best for the next iteration.
    Previously it would only save only the best result. It will also print
    more info.

    I don't understand why we don't just merge the ParameterScorePair class
    with the QMCObjectiveFunctionResult class. Also, I don't understand the point
    of making SortedParameterScorePairList it's own class, as opposed to simply using
    a C++ list.
3.  I fixed a bug in the umrigar88 optimization method. Previously, it
    used the HF energy as a reference point, it now uses HF-J as it should.
4.  I improved error checking for branching in QMCWalker. QMCWalker also
    has a much better warning system now, which helps a lot in identifying
    problems.
5.  I added a more error checking for reading checkpoint files.
6.  I improved the initialization in QMCRun. Previously, it would accept
    any initial configuration that's not singular. The check is more
    stringent now.
7.  QMCManager will print more info during equilibration, a possibility
    allowed by printing equilibration iteration numbers as negative.
    The definition of the iteration variable itself is preserved, the
    change was just in writeEnergyResultsSummary, and then the place
    where QMCnode.zeroOut is called was changed.
8.  QMCWalkerData is now a class, and not a struct anymore. This change
    permitted some of the code in QMCWalker to be cleaned up.
9.  I fixed a minor bug in QMCReadAndEvaluateConfigs that resulted
    in the last configuration being added to the statistics twice.
    I also improved commenting and warning output a bit.
    "HLR" refers to the 1994 Hammond, Lester, Reynolds book.
Summary:
With these changes, I think the optimization works again, although
there are probably some more improvements yet.

Furthermore, a DMC calculation is a lot more stable, although it's
unclear whether the changes I made change the answers. I didn't intend
to commit all these changes yet, but it was easier to commit them all
instead of untangling them from the optimization changes.

Sun, Apr 15, 2007 Daniel R Fisher
1.  I changed the way that checkpoint files are written by QMCProperty
    and QMCEquilibrationArray.  Previously, QMCProperty wrote out the
    whole decorrelation array, which has 30 elements.  In a typical
    calculation, only about 20 of them are active, so about a third of
    the data being written out was zeros.  I changed it to write out
    only the active elements.  I made a similar change in
    QMCEquilibrationArray.  This reduces the size of the checkpoint
    files by about half.

Wed, Apr 11, 2007 Daniel R Fisher
1.  I fixed a bug in QMCDansWalkerInitialization.  In some cases, it
    allowing energy levels to be occupied before the lower energy
    level was completely full.  When the atoms are checked to see if
    they are charged and the electrons are moved around, it also makes
    sure that the lower energy level is full before the next one
    starts to be occupied.
2.  I changed the objective function in QMCEquilibrationArray.  I have
    been messing around with the objective function in the course of
    writing the paper, and found a new one that works better.

Tue, Mar 6, 2007 Amos Anderson
1.  I improved checkpointing. It will now put the checkpoint files
    into a sub directory. This means less clutter for a parallel job.
    It also allows you to specify a name to use for input checkpoint
    and a separate name for output checkpoint.
2.  QMCWalkers can now know the current iteration. This is useful
    since we might want to be more aggressive in handling bad walkers
    while equilibrating.
3.  I also improved the QMCWalker warning system.

Tue, Feb 13, 2007 Amos Anderson
1.  I fixed a bug in the checkpointing mechanism. It works again.

2.  I changed how parallel RNG seeds are generated. Now, it will
    request my_rank integers from the generator, and the last integer
    drawn will be used as the random seed.

Fri, Feb 9, 2007 Amos Anderson
1.  I changed random into Random. This makes it easier to use different
    RNG, and I've included SPRNG compatibility. Although I'm able to
    compile with SPRNG v4.0 (the C++ version), I get seg fault every time
    I initialize it, so something is wrong with their library.
2.  When running the QMcBeaver executable, it will print out whatever info
    I can find from the preprocessor macros as well as some general compile
    info.

Mon, Jan 22, 2007 Amos Anderson
1.  I changed the memory usage for QMCWalker. Previously, 3 walkers
    were in existance at each step: this, TrialWalker, OriginalWalker.
    This means that some of the data is redundant and there are more
    memory copies than necessary because we only need 2 walkers at
    each stage. When measuring the change for a very cheap wavefunction,
    the code now performes ~50% faster I think. I believe I made all
    the changes correctly, but I wouldn't be surprised if there's
    a bug somewhere...
2.  I added a step to branching. If we are going to branch, QMCRun
    now asks QMCWalker whether it would recommend a branch. Since
    branching is purely related to efficiency, this step shouldn't
    change detailed balance. On the other hand, if we refuse to branch
    at bad spots in the trialfunction, then perhaps we can slow
    any tendency to blow up, as poor trialfunctions are liable to do.

Thr, Dec 6, 2006 Amos Anderson
1.  I've added the harmonic oscillator to QMcBeaver. To do this,
    I turned QMCFunctions into an abstract class which various
    wavefunction definitions can use inheritance to conform the
    rest of QMcBeaver. To add new wavefunctions, all you have to
    do is extend QMCFunctions, and supply an evaluate function.
    To enable this flexibility, I changed several parts of the code.
    The original QMCFunctions is now called QMCSCFJastrow. To enable
    n-dimensional harmonic oscillator wavefunctions, I use the
    nbasisfunc input parameter to select the dimension. Although
    the harmonic oscillator seems to be behaving correctly, there
    are probably parts of the code that won't work right. For example,
    wavefunction optimization.
2.  I fixed two bugs in the importance_sampling option. Previously,
    it was neither moving the electrons correctly nor calculating
    the reverse green's function correctly.

Tue, Nov 21, 2006 Amos Anderson
1.  I added singular value decomposition. It doesn't make a difference
    but I figured that I'd keep it anyway.
2.  I verified that we really are calculating KE = 2T - F^2 and
    I improved relevant commenting.

Wed, Sep 20, 2006 Daniel R. Fisher
1.  Fixed the function in gamess2qmcbeaver.py that gets rid of
    unoccupied orbitals in the .ckmf file.

Sat, Sep 16, 2006 Daniel R. Fisher
1.  In QMCWalker::moveElectronsUmrigar93ImportanceSampling() and 
    calculateReverseGreensFunctionUmrigar93ImportanceSampling(), the
    displacement is decomposed into z and radial components from the
    nearest nucleus.  In the case where there is only one nucleus and
    there is no Jastrow function, the radial component is zero.  This
    was causing a divide by zero when the radial component was
    normalized.  I put in a check to fix this problem.

Wed, Sep 6, 2006 Amos Anderson
Note: some of these changes are from back in April when I was preparing the paper.
Hopefully now all the important changes have been preserved.
1.  I changed several timers relevant to GPU code to use microseconds
    rather than milliseconds.
    
2.  I made some minor modifications to QMCBasisfunction -- maybe more needed
    to try to cut out denormals. For example, maybe the isnormal function
    should be employed since denormals add little to the accuracy, but can
    really slow down some processors since they might be handled in software.
    
3.  Some other minor changes to GPU matrix multiplication code. There is
    a remaining issue regarding initializing walkers and the printPsi option
    as well as a question of whether Array2D should allow matrices dim = 0.
    
4.  I made another change to IeeeMath.cpp -- it now uses the isfinite function,
    and I deleted all the other junk I had added.

Fri, Aug 25 2006 Daniel R. Fisher
1.  Eliminated the shuffle step in QMCDansWalkerInitialization.
    Instead, I will process the correlation diagrams so that they are
    symmetric.

Wed, Aug 16, 2006 Daniel R. Fisher
1.  Added the capability to make two dimensional correlation diagrams.
    A correlation diagram shows the distribution of one coordinate for
    a pair of electrons.  For example, if we were making a correlation
    diagram for the x coordinte of parallel spin electrons, at each
    iteration we would add the weight of the walker to the histogram
    bin corresponding to x1,x2 for each parallel pair.

2.  Added a shuffle operation to QMCDansWalkerInitialization.  Now,
    the order of the alpha electrons are shuffled and the order of the
    beta electrons are shuffled.  This will not change the energy or
    value of the wavefunction, but will make the correlation diagrams
    more symmetric. 


Thur, 20 July 2006 Amos Anderson
1.	Changed some of the default parameters.

2.	Added a new convergence criteria called "max_time". Basically,
	this will limit the number of samples to "max_time/dt_run". The
	purpose is so that a consistent number of steps can be applied
	across several dt values.

Thur, 20 July 2006 Amos Anderson
NOTE: I discovered that I coded IeeeMath.cpp wrong: apparently this doesn't work the way
I thought it would "x == std::numeric_limits<T>::quiet_NaN()", at least not on all systems.
I still haven't figured out how to do this without resorting to c-style functions like "isfinite()".

1.	I've substantially modified QMCFlags.cpp. I tried to organize
	the flags according to purpose -- arbitrary to be sure, but hopefully
	the flags would make a little more sense to a newcomer now. The original
	point was that I wanted the restart input file to be organized.

2.	I changed QMCFlags.cpp so that input files can now have comments. A line
	that begins with a '#' will be ignored -- as long as it doesn't appear
	between a flag name and flag parameter. There might be some issues with
	the system, so be vigilant!

3.	I changed QMCWavefunction.cpp so that it is neater when writing out the
	wavefunction. I also added some comments just to make the code a little
	more readable.

4.	I added a static flag to QMCManager so that it is easy to turn on/off
	the printing signaling information.

5.	After consulting with the QSC people for why signaling wasn't working,
	I was told that LSF doesn't treat signals properly. Basically, the problem
	was that it would catch the SIGUSR1 signal that I told bsub to send QMcBeaver
	near the wallclock limit time, and although it would properly send SIGUSR1 to
	the program, it would also kill the application. A caught signal is not supposed
	to result in the program dying. Anyway, they told me that SIGURG was
	handled properly so the code will now look for it instead. (signal choices are
	designated in QMcBeaver.cpp)

6.	I finally uncommented the block that used to say "CHIP we will want this back in"
	in QMCWalker. All it does is spit out a warning, so it shouldn't hurt anything
	anyway.

Fri, 14 July 2006 Daniel R Fisher
1.  Took out a bunch of cout's that I accidentally left in
    QMCDansWalkerInitialization when I was working on it.

Tue, 11 July 2006 Daniel R Fisher
1.  Changed the way checkpoint files are read so that each walker does
    not have to initialize its own QMCFunctions object to evaluate
    itself.  Instead, the QMCFunctions in QMCRun evaluates all the
    walkers.
2.  Fixed a small bug in QMCDansWalkerInitialization that dealt with
    redistributing electrons when nuclei are charged.

Wed, 5 July 2006 Amos Anderson
1.	Fixed a bug in how populationSizeBiasCorrectionFactor was calculated.
	Previous calculations using the correct_population_size_bias = 1 flag
	had significantly higher statistical fluctuation than with the flag
	turned off.

Thurs, 15 June 2006 Daniel R. Fisher
1.  Made a new flag, max_pair_distance, which sets the maximum length
    of the histograms (in au) if intrapair distances are being
    recorded.

Wed, 14 June 2006 Daniel R. Fisher
1.  In QMCDansWalkerInitialization, improved the way electrons are
    redistributed if any nuclei are charged after the electrons are
    assigned.

Wed, 7 June 2006 Amos Anderson
1.	Made it easier to add new future walking properties to measure.
2.	Fixed a QMCNuclearForces problem relating to compiling in float.

Fri, 26 May 2006 Daniel R. Fisher
1.  Changed the way electrons are distributed among the nuclei in 
    QMCDansWalkerInitialization.  In calculations on He2, it was
    putting two alpha electrons on one He and two betas on the other.

2.  In QMCFunctions::calculateModifiedGradPsiRatio(), put in a check
    for very small electron velocity.  It was causing a division by
    zero and crashing calculations.

Mon, 22 May 2006 Amos Anderson
1.	Fixed a bug in gamess2qmcbeaver.py. It was mistakenly identifying
	bohr geometries as angstroms.

Mon, 16 May 2006 Amos Anderson
1.	I changed how IeeeMath checks for NaN.

2.	I cleaned a bunch of the non-source files.

Mon, 15 May 2006 Amos Anderson
An important note. There are quite a few changes here, many are "here to stay"
while others will be removed eventually. There are 3 significant changes: future
walking, nuclear forces, and system signalling. While the code seems to be working
well for me on all the systems that I've tried, I would say that this code should
be called "experimental", but because the vast majority of this code is close to
what it will eventually look like, in committing it to cvs, I don't want to create
a different branch that will be difficult to merge later. Instead, I've tagged all
the source files with "may_15_2006" in case you want to get the code as it was
before all these changes.

1.	In CubicSpline, the intitializers now use Array1D array copying.
	Also, added an integrate function.

2.	In LU.cpp, determinant_and_inverse changed the static arrays to
	the regular storage class since the static arrays caused problems
	when inverting matrices of different dimensions.
	
3.	Improved error handling in QMCConfigIO. Also, fixed a bug wrt when
	the files were opened in the course of a wavefunction optimization.

4.	QMCDerivativeProperties now uses the Future Walking KE and PE so
	that it produces several virial ratios.
	
5.	QMCFlags just gives a warning if it gets a flag it doesn't know
	about. It used to exit.
	
6.	QMcBeaver can now process some system signals! Previously, a QMcBeaver
	process would crash if it ever received a signal from the system. Now,
	by default as set in QMcBeaver.cpp, it will trap SIGUSR1 and signal 40.
	If SIGUSR1 is sent to a QMcBeaver process, it will immediately seek to
	reduce the calculation data across all processes, and then print all that
	info as if the calculation were actually done, except that it will then
	resume where it left off. The point is that many batch systems can be set
	to send a signal of your choice to your process a short time before it
	sends a SIGKILL, which can not be trapped. I set up the code so that
	SIGUSR1 will reduce, and signal 40 will increase max_time_steps. For example,
	you could send a SIGUSR1 (using the command "kill") and if you think it
	needs more time, then you could send a signal 40. QMcBeaver will
	also trap SIGTERM, which does the same as SIGUSR1 except that in addition
	it quits.
	
7.	I generalized a bit of code out of the synchronize_dmc_ensemble section of
	QMCManager.cpp with the intention of letting the output always have new
	data to show, regardless of whether we've had a reduction since the last
	output. Similarly, QMcBeaver no longer exits if
	mpireduce_interval < output_interval; it just gives a warning.

8.	I removed Eave+Estd and Eave-Estd from the output.

9.	There were some bug fixes in QMCProperties and QMCProperty with respect
	to MPI_reduce. As noticed by Chip, they used to ignore the len parameter
	in their Reduce_Function. This has been fixed. Previous calculations
	in which a reduction was performed over an array of QMCProperties
	(e.g. in QMCManager::gatherDensities and
	QMCReadAndEvaluateConfigs::MPI_reduce) were therefore flawed since it
	was only actually reducing over the first element of the array. Fixing
	this problem introduced a new problem -- the size of QMCProperties::MPI_TYPE
	and QMCProperty::MPI_TYPE were wrong, meaning that a reduction over an
	array would fail for any element after the first element because MPI
	didn't know where each element actually began. This has been fixed, and
	the parallel code now runs on borg/matrix (LAM/MPI), my OSX laptop (LAM/MPI),
	and LANL QSC (its own MPI?), but I'd appreciate an independent
	verification since i'm really green when it comes to MPI...
	
10.	QMCProperty now uses memcpy in operator = ( const QMCProperty & rhs ). This
	was a slight performance improvement. QMCProperty is now a bit more intelligent
	about writing out its data.
	
11.	QMCRun will now kill the program if all the walkers die or if getWeights() <= 0.

12.	I am now including my future walking code. For any observable that
	does not commute with the Hamiltonian (e.g. KE, PE, forces) the property
	has a much larger measurement error. Future walking can correct for this problem
	using (for example) an algorithm described by Casulleras and coworkers in
	Phys. Rev. B, Vol 52, pg 3654. This algorithm requires a choice for "block length".
	A new flag was added to QMCFlags permitting specification of a series of block
	lengths to use. A future walking block length 0 is exactly equivalent to
	no future walking used, and I'm planning on removing KE and PE from QMCProperties
	once i'm more confident. I have set up the code to always include a 0 block
	length, which means that i'm not planning on having any way to turn future walking
	"off". If you don't want it to spend time there, then just don't use any other fw
	block lengths.
	I'll write more about future walking in the manual.
	Also, QMCWalker has some superfluous variables and calculations that I'll remove
	eventually. Specifically, the code will measure r^2 and r_{12} -- useful for validating
	future walking using Helium.
	
13.	This upload includes my nuclear force code using the method described by Chiesa and
	Ceperley in Phys. Rev. Lett., vol 94, 036404. Simone graciously provided me with
	his fortran code, and I have done my best to implement it in QMCNuclearForces,
	but I have not completely validated my "port" yet. I'll write about this in the
	manual when I have a better feel for parameters etc. I have not worked out all
	the details wrt EquilibrationArray yet (it calls assert(0) if both parameters
	are used).

14.	Stopwatch will write out the times in hours as well as milliseconds. It also
	uses long long to store its data.

15.	I added some functions to Array1D so that it looks a little more like std::vector.
	I also made some of its functions const. We should really make an effort to use
	const wherever it is applicable...
	
16.	I set some of Array2D's functions to const. I also fixed a bug in Array2D which
	confused transposed and non-transposed matrices during matrix multiplication.

17.	I've added some commentary to QMCFlags.h. I've pasted this commentary into the
	manual too.
	
18.	I moved QMCWalkerData out of QMCFunctions and into its own file.

19.	I have updated the make system to include making all the help files. This includes
	both the doxygen files as well as the beaver.tex manual.

20.	I've substantially changed the pbsqmcbeaverrun.py script.


Wed, 26 April 2006 Amos Anderson
1. Put the LU code back into Array2D

Mon, 24 April 2006, Daniel R. Fisher
1. Improved QMCElectronNucleusCusp and
   QMCElectronNucleusCuspParameters to fix some problems that came up
   in calculations.

Sun, 16 April 2006, Daniel R. Fisher
1. Made some changes to the addition and multiplication operations in
   QMCGreensRatioComponent to avoid some numerical errors that were
   happening.  

Wed, 15 March 2006, Daniel R. Fisher
1. Moved the function that randomly generates and evaluates initial
   electronic configurations for the walkers from QMCWalker to QMCRun.
   This way, there is only one QMCInitializeWalker object, which is
   used to generate the initial configurations for the entire
   ensemble.  The initial configurations are evaluated by the
   QMCFunctions that is already in QMCRun.  Previously, each walker
   had its own QMCInitializeWalker and QMCFunctions to do this. 

Tues, 14 March 2006, Daniel R. Fisher
1. Added two classes, QMCElectronNucleusCusp and
   QMCElectronNucleusCuspParameters, which replace Gaussian orbitals
   with exponential functions near the nuclei.  The replacement
   functions satisfy the electron nucleus cusp conditions and match
   the value and first and second derivatives of the original orbital
   at the radius of correction.  To use this feature, set the flag
   replace_electron_nucleus_cusps to 1 and set all the electron
   nucleus Jastrow types to "None."

Mon, 13 Mar 2006, Chip Kent
1. Fixed a bug in the MPI type created for Stopwatch.  MPI_LONG_INT
   is a struct containing a long and and int not a long int.  This was
   changed to MPI_LONG which is a long int.

2. Changed a strcpy to strncpy in QMCManager::sendAllProcessorsInputFileName
   to avoid any chance of stack crashing attacks using QMcBeaver.

3. Added support for Open-MPI.

4. Fixed a bug in Stopwatch.h which prevented the file from building
   properly on Linux.

5. Disabled long double warning messages from GCC.

Mon, 16 Jan 2006, Amos Anderson
I committed many changes that I had made over the last several months.
1. QMCRun now keeps one copy of QMCFunctions, meaning that QMCWalker's
   initializeWalkerPosition does not have to create one. This is simply
   to save a bit of memory...

2. I added the NaN check x+1==x to IeeeMath, and modified QMCWalker to
   reflect this.
   
3. I added the GPUQMCJastrowElectronElectron class that I had written. To
   program this, I had to modify the abstract QMCCorrelationFunction class
   to force all correlation function classes to allow other classes to query
   the polynomial coefficients. The JuliusCorrelationFunction is not compatible
   with what I've programmed. Changes were made to QMCJastrow.
   
4. I changed Array2D so that many of its functions are now in a separate file
   called Array2D.cpp. I also modified it so that it itself computes the inverse
   and determinant.
   
5. I changed how QMCSlater is arranged. I wanted to let QMCFunction choose when
   it wanted the determinant/inverse computed relative to when the matrices were
   multiplied. This permits the GPU to get started on some work, letting the CPU
   do some other stuff before wrapping up the calculation.
   
6. QMcBeaver can now run CPU calculations and GPU calculations simultaneously. That is,
   I can tell it to calculate a certain number of walkers on the GPU, and the rest
   of the walkers from the walkers_per_pass parameter get processed on the CPU. This
   is my attempt at balancing the CPU and the GPU, and is related to #5 above.

7. I monkeyed with the Stopwatches class. Its internal storage is now in microseconds
   instead of milliseconds. This helps preserve some of the information. I don't
   think I had the Windows/Cygwin compatibility quite finished.

Wed, 7 Dec 2005, Daniel R. Fisher

1. Modified the way that the electron density histograms are collected
   so that only one file is written out, instead of one for every
   processor.  The histograms are now collected at the MPI_Reduce
   interval and written out by the root processor.  
2. Changed the way that the multiconfiguration trial functions are
   created.  In the output of a GAMESS MCSCF calculation, the CI
   expansion does not correspond to the orbitals written in the data
   file.  To get the right coefficients, run a calculation with
   SCFTYP=NONE and CITYP=ALDET with the natural orbitals of a
   converged MCSCF calculation as the read in $VEC.  Then run
   gamess2qmcbeaver.py on the output of the CI calculation.

Wed, 16 Nov 2005, Amos Anderson
1. Modified the way configuration files are handled. It is all handled by
   a new class, QMCConfigIO, which allows you to choose whether it is
   output in text mode or in binary. There is a flag in QMCConfigIO.cpp
   where this setting is chosen.

Mon, 7 Nov 2005, Chip Kent

1. Modified the release creation script to generate the user guide in 
   addition to the API guide.

Thurs, 20 Oct 2005, Daniel R. Fisher

1. In the case of multideterminant trial wavefunctions,
   QMCDansWalkerInitialization now decides which determintant to use
   when distributing the electrons among the nuclei based on the CI
   expansion coefficients.
2. The electron nuclear and electron electron components of the
   potential energy are now recorded separately, in addition to the
   total potential energy.
3. Submitted, on behalf of Julius Su, changes that make it possible to
   use a "mean field" potential, in which the electron positions are
   averaged over several walkers.  This was written for use in DFT
   development.  To use this, use "None" for all correlation function
   types and set the flag "use_hf_potential" to 1.
4. There is a new option called "lock_trial_energy" which fixes the
   trial energy at its initial value in DMC calculations.

Fri, 23 Sep 2005, Daniel R. Fisher

1. Fixed a memory leak in QMCJastrowElectronNuclear.cpp

Wed, 21 Sep 2005, Daniel R. Fisher

1. Added the capability to calculate one electron density in
   addition to electron pair density histograms.  To calculate all
   electron densities, set the write_electron_densities flag to 1.
   This replaces the write_pair_densities flag.
2. Changed the way the histograms are normalized when they are written
   out.
3. Added the capability to use unrestricted trial functions in the SCF
   part of the wavefunction.  Unrestricted trial functions can be
   generated with Jaguar or GAMESS.  This will result in a .ckmf file
   in which the alpha and beta orbitals have different coefficients.
   The old input files can still be used. 

Wed, 14 Sep 2005, Daniel R. Fisher

1. Fixed a sign error in FixedCuspPadeCorrelationFunction.cpp

Thurs, 8 Sep 2005, Daniel R. Fisher
1. Changed the way that the distances for the pair density histograms 
   are written.  Previously, the bins were labeled by their greatest
   distance, which caused problems at small distances.  Now, they are
   labeled by their midpoint.

Thurs, 8 Sep 2005, Amos Anderson
1. I submitted all my GPUQMC code. So far, it only works on Windows
   with Visual Studio or cygwin. Use --gpu with configure.py and look
   at the lib/README for library set up guides.
2. Several more classes have the "streaming" capability. This includes
   QMCJastrow and QMCPotential_Energy.
3. The code can now use LAPACK to calculate the inverse, but it does not
   add much improvement. Use --lapack with configure.py.
4. I changed the MPI constants in QMCRun.h to be prefixed with QMC_ because
   the other ones were conflicting with something in the Windows API.
5. For compatibility with Intel's Vtune's Call Graph, configure.py now
   accepts --vtune. This sets profiling parameters to emulate Visual
   Studio's /fixed:no.
6. There are several vtune identified performance enhancements. Most of
   them were simply moving memory allocations outside of loops.
7. Two new flag parameters were added. The WALKERS_PER_PASS is now,
   appropriately, an input parameter. In addition, I added a flag whereby
   we (programmers) can quickly test different inputs via the input file.
   The programmersLongs will allow you to enter any number of longs. I'll
   upload a couple scripts I wrote to take advantage of this.
8. I fixed a small bug in the Makefile which was causing it not to compile
   optimized code!!!
9. I added an atexit hook in QMcBeaver.cpp which I use to call getchar()
   under Windows.
10.QMCSlater no longer performs all it's calculations upon a call to
   evaluate(). It divides the time between evaluate (setup) and update_Ds
   (actual calcs) to allow QMCFunction the ability to better schedule the
   processor. This makes a difference for GPUQMC.
11.I used the sourceforge project astyle to format most of the code I
   submitted. The most important change is that it replaced tabs with
   spaces, allowing the code to look decent on any editor, not just
   emacs.
12.I added another isNaN check to QMCWalker. Somehow the GPU was creating
   NaN's not identified by isnan or isinf.

Thurs, 25 Aug 2005, Daniel R. Fisher
1. Added the capability to synchronize the ensemble in DMC
   calculations.  If this option is used, the global properties are
   sent to every node and used for weighting the walkers, determining
   the effective time step, and determining the trial energy.  To use
   it, set the flag synchronize_dmc_ensemble to 1 and
   synchronize_dmc_ensemble_interval to the interval at which the
   global properties are to be collected and sent to all the nodes.

2. Added the capability to calculate pair densities for DFT
   development.  If this option is used, the distance between each
   pair of electrons is calculated and recorded in parallel and
   opposite spin histograms.  To use it, set the flag
   write_pair_densities to 1.  The histograms are written out at the
   interval specified by the flag write_pair_densities_interval.  

Thurs, 23 June 2005, Daniel R. Fisher
1. Changed the criterion in QMCEquilibrationArray for determining the 
   equilibration length from the serially decorrelated standard deviation to an
   objective function involving the expectation value of the energy, its 
   serially correlated variance, and the number of samples.

2. Fixed a problem in QMCDansWalkerInitialization which was sometimes causing
   uneven distributions of electrons.

Tue, 10 May 2005, Amos Anderson
1. Committed my code for a streaming version of QMCFunction with all
   necessary correlary changes.
   This modification actually makes the code a little bit faster --
   more so with more walkers.
   This also adds a new macro WALKERS_PER_PASS.

2. I added some QMcBeaver compiling discussion to beaver.tex. I also
   cleared up some citations.

3. I replaced QMcPlot1.py and QMcPlot2.py with PlotQMc1.py and
   PlotQMc2.py so the first couple
   characters is not the same as the executables.

4. Made a couple minor changes to the make system. configure.py will
   accept a TAG argument, necessary
   for 'make updateall', which performs a batch build for all exec's
   sharing the TAG. I chose this
   instead of the compiler name because many different processors have GCC.

Mon, 2 Apr 2005, Chip Kent

1. Rewrote configure.py to make it easier to maintain and extend.  

2. Made changes necessary to support PGI and Intel compilers.

3. Made changes to remove all warnings about using deprecated STL
   code.

Sat, 12 Mar 2005, Daniel R. Fisher

1.  I moved the (lnJ == 0) check in QMCReadAndEvaluateConfigs from after the 
    local energy and logweight are calculated to after the config is read from
    the file.  This keeps the extra configs from being evaluated. 

Fri, 11 Mar 2005, Daniel R. Fisher

1.  Fixed the jaguar2qmcbeaver.py script.  It was not printing the CI
    coefficients, so they were being initialized with garbage values.

2.  Made some of the arrays in QMCDansWalkerInitialization static.
    This makes the initialization faster.

3.  Added the capability to calculate the expectation values of the
    basis functions.  To do this, set the calculate_bf_density flag to 1.

Tues, 8 Mar 2005, Amos Anderson
1.  I upgraded Stopwatch.h so it now uses Microsoft's high precision
    QueryPerformanceCounter and QueryPerformanceFrequency timing
    functions. The precision is now at the 1 ms resolution when the
    USE_HIGH_PRECISION tag is defined (on by default).

Thurs, 3 Feb 2005, Amos Anderson
1.  I toyed with the makefiles, removing some mistakes/bugs and
    beautifying. They are now really cool.
    I added a new target "updateall" which will update all the
    executables simultaneously.

Tues, 1 Feb 2005, Amos Anderson
1.  Changed some of the behavior of configure.py. Now, you can easily
    keep all the objective files for several different Makefile.config
    choices. e.g. serial debug objective files are seperate from
    parallel debug files are separate from serial atlas debug
    files. Also, I changed the naming of the executable files so you
    can tell some of the options they were compiled with just by
    looking at the name. Not sure if i need to modify this to make
    sure it stays under 16 characters...

2.  Added numerical stability checks to QMCGreensRatioComponent.cpp,
    QMCBasisFunction.cpp, and QMCFunctions.cpp. The code now runs on
    LANL's QSC with or without ATLAS, on H2O, He, HMX.
    Note: according to the ATLAS website errata, the ATLAS library can
    not be threaded on Dec Alphas...
    I don't know how serious that is...

Thurs, 30 Dec 2004, Daniel R. Fisher

1.  Added a << function to Array3D.h so that the program would compile on QSC.


Tues, 23 Dec 2004, Amos Anderson
(note! i have not tested these changes anywhere but my G4 laptop. i'll
do that soon)
1.  Modified Dan's multi-determinant specific changes. With a small
    commenting flip in QMCWavefunction.cpp, the new QMcBeaver can read
    the old input files.

2.  Added some of the example files i've been using for
    profiling. This is purely for convenience. Namely, my convenience
    in finding them again.
3.  Now that I understand the derivative ratio calculations better, I
    discovered that when calculating the transpose of inverse of the
    Slater matrix (a minor index switch) then creating the derivative
    ratios becomes a dot product.
4.  ATLAS capabilities have now been added. Besides adding the
    required BLAS like interface, all matrix-matrix multiplication
    math in QMcBeaver is now fully moved into Array2D.h. Choosing
    whether to use ATLAS or not is handled by configure.py. ATLAS only
    makes a difference for larger molecules. A new lib directory to
    CVS to hold the required libraries with some instructions on how
    to install them. I also added the required header files to CVS for
    convenience.

    Just some notes on compiling ATLAS:
    Compiling ATLAS on cygwin went perfectly.
    Compiling ATLAS on OSX required me to compile a new GNU compiler
    (non-Apple modified)
    Compiling ATLAS on Linux P3 (wolfs) went perfectly.
    Compiling ATLAS on Irix (origin) failed. I have not tried the
    online precompiled version.

    Dan did the matrix-vector multiplication transformation to
    matrix-matrix multiplication as well as some key streamlining
    modifications in QMCBasisFunction.cpp and QMCSlater.cpp.

    The chosen solution for the multideterminant wavefunction matrix
    multiplication is as follows. The Slater matrix is dynamically
    composed before each multiplic ation using memcpy. I read that
    memcpy is only 3 lines in assembly, so it should be fast...
    This means that the multideterminant QMcBeaver requires very
    little additional memory above the old version.

5.  Array1D now has some of its methods implemented in ATLAS.

6.  I replaced some of the code in Array1D and Array2D to have them
    use some of the C memory functions (e.g. memset). This probably
    helps.

7.  I have the code read in WF.Coeffs as the transpose of what it was
    before.  That is, nOrbitals is now the first dimension instead of
    nBasisFunctions.  This required very minor modifications in 2 of
    the initialization schemes.  Although ATLAS doesn't care whether
    multiplying a transpose or not, in princple hand-coded versions
    are faster?

8.  There were some type-casting warnings in several places of code I
    decided annoyed me enough to do the casting explicitly.

9.  I modified QMCJastrowElectronElectron.cpp and
    QMCJastrowElectronNuclear.cpp with a very minor optimization.

10. Some profiling results. With ATLAS on the HMX molecule, QMcBeaver
    is approximately 4 times faster on my G4 laptop, and uses about 10
    mb memory. The streamlining non-ATLAS version is about 2 times
    faster.

Tues, 14 Dec 2004, Daniel R. Fisher

1.  Updated the .ckmf files for the test and example calculations to
    have the new wavefunction format.  Also added two multideterminant
    calculations to the examples.  


Wed, 8 Dec 2004, Daniel R. Fisher

1.  Fixed the gamess2qmcbeaver.py script to handle MCSCF geometry
    optimizations.

2.  Changed the comments in the parts of the code that deal with the
    wavefunction to include multideterminant wavefunctions.


Thurs, 2 Dec 2004, Daniel R. Fisher

1.  Implemented multi determinant wavefunctions for the SCF part of
    the trial function.  The most substantial changes are in QMCSlater
    and QMCFunctions.  MSCSF trial functions can be calculated using
    GAMESS with CANONC=.FALSE. in the $MCSCF section.


Wed, 27 Oct 2004, Amos Anderson

1) fixed a bug in Array2D.h in the matrix-matrix multiply function

2) finally submitted all the changes necessary to run QMcBeaver on
   Windows. I also added a folder "windows" in the top directory
   containing Visual Studio project files. I tried my best to make
   sure that all the paths in those files are relative...
   The project files will run the simple
   ..\examples\H2_hf_631Gss-vmc.ckmf example I also added. To change
   which input file to use, change the entry in the menu bar at
   Project/QMcBeaver/Properties/Configuration
   Properties/Debugging/Command Arguments

  *note: I spent some time trying to force Visual Studio to make the
  CVS code format nicely.
  There is a significant discrepancy between how VS and Emacs
  interpret tabs in the code. I tried to make as few formatting
  changes possible so as not to mess up the code for everyone else...


Sat, 16 Oct 2004, Daniel R Fisher

1. Fixed the comments in the AngleDistributions, RadialDistributions,
   Array1D, 
   QMCDansWalkerInitialization, QMCEquilibrationArray,
   QMCExtendedProperties, QMCGreensRatioComponent, QMCProperties,
   QMCProperty, QMCRun, and QMCWalker classes to work with the JavaDoc
   documentation.

Thr, 14 Oct 2004, Chip Kent

1. Improved the output formatting.  For some cases, the columns of 
   numbers would run together.

2. Added Doxygen documentation to the files generated for a release.

3. Added support for GCC 3.4.

Wed, 13 Oct 2004, Chip Kent

1. Improved the script to build official releases so that it appends the
   version number to the directory.

2. Added an example input file directory with a few entries.

Wed, 8 Sept 2004, Daniel R. Fisher

1.  In the constructor function for QMCWalker, set the trial step
    size, dR2, to 0.  It was being used uninitialized and causing
    problems with the calculation of the effective time step.

2.  In QMCManager::writeEnergyResultsSummary(ostream & strm), added
    the total number of samples collected to the results summary.

3.  In QMcBeaver.cpp, added a Total Samples heading for the column
    with the total number of samples in the global results.


Mon, 30 August 2004, Daniel R. Fisher

1.  Got rid of the need to read the distributions from files in
    QMCDansWalkerInitialization by using CubicSplines.  The resulting
    method is much faster.  The distributions are now stored in the
    AngleDistributions and RadialDistributions classes.


Mon, 30 August 2004, Daniel R. Fisher

1.  Changed configure.py to include settings for the cray_x1 computer.

2.  Added the class QMCGreensRatioComponent.  The Greens function
    calculations were causing numerical overflow problems for large
    molecules.  This class keeps track of a quantity of the form
    k*a^b*exp(c), which is the form of the Greens function components
    in the importance sampling parts of the code.


Thurs, 29 July 2004, Chip Kent

1. Included Amos Anderson's changes to improve the formatting of the
   output.  These changes make the output much easier to read.


Thurs, 29 July 2004, Chip Kent

1. Included Amos Anderson's changes to the build procedure.  These
   changes make it possible to remove the annoying src/Makefile.dep
   file which constantly changes in CVS.  In addition, the new build
   procedure makes it possible to build for multiple systems using the
   same code base.


Wed, 21 July 2004, Daniel R. Fisher

1.  Submitted changes on behalf of Amos Anderson fixing
    calculateReverseGreensFunctionUmrigar93ImportanceSampling() in
    QMCWalker.  The distances were being calculated from the proposed
    positions instead of the original positions, which was causing a
    very high acceptance probability.  


Thurs, 15 July 2004, Daniel R. Fisher

1.  Changed the call to isnan() in QMCEquilibrationArray to come from
    the IeeeMath class instead of <math.h>.  The previous function was
    not compiling on some systems.


Fri, 9 Jul 2004, Daniel R. Fisher

1.  Added QMCEquilibrationArray.  This defines an array of
    QMCExtendedProperties objects, each of which consists of a
    QMCProperties object and equilibration and propagation
    Stopwatches.  The ith element of the array starts collecting
    statistics on the (2^i)th iteration of the run.  When the
    properties are gathered, the element of the array with the
    smallest standard deviation for the total energy is chosen and
    sent to the root processor.  
    When the timing information is collected, the propagation and
    equilibration timers from the appropriate QMCExtendedProperties
    object are added to the localTimers and sent to the root
    processor.
    When correlated sampling configurations are read, each processor
    determines how many configurations from the beginning of the file
    should be skipped.  
    To use the equilibration array, set the flag
    use_equilibration_array to 1.


Wed, 7 Jul 2004, Daniel R. Fisher

1.  Added QMCDansWalkerInitialization.  This initialization method
    requires very few equilibration steps before statistics can be
    gathered.  To use it, set the walker_initialization_method flag to
    dans_walker_initialization and copy radial_dist_arrays and
    angle_dist_arrays from the QMcBeaver/src directory into the
    working directory.
    As part of this method, I added some quaternion operations for
    calculating rotations to Array1D.h.

2.  Added an equilibration Stopwatch to QMCStopwatches.  The time spent
    equilibrating the chain is now referred to as "equilibration time"
    and is recorded by the equilibration Stopwatch.  The Stopwatch
    that used to record this time was called the initialization
    Stopwatch.  This Stopwatch now records the time spent generating
    initial configurations.


Thu, 1 Jul 2004, Daniel R. Fisher

1.  In QMCManager and QMCFlags, made sure the iseed is always a
    negative integer whenever an input, restart, or checkpoint file is
    written or read.
    When writing restarts and checkpoints, -1*iseed is written out if
    iseed is positive.  The value of iseed itself is not changed.
2.  In QMCManager, fixed the conditional statement for writing out
    correlated sampling configurations.  Now it writes out
    configurations at the proper interval.
