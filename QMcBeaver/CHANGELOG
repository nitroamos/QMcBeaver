Wed, 14 June 2006 Daniel R. Fisher
1.  In QMCDansWalkerInitialization, improved the way electrons are
    redistributed if any nuclei are charged after the electrons are
    assigned.

Wed, 7 June 2006 Amos Anderson
1.	Made it easier to add new future walking properties to measure.
2.	Fixed a QMCNuclearForces problem relating to compiling in float.

Fri, 26 May 2006 Daniel R. Fisher
1.  Changed the way electrons are distributed among the nuclei in 
    QMCDansWalkerInitialization.  In calculations on He2, it was
    putting two alpha electrons on one He and two betas on the other.

2.  In QMCFunctions::calculateModifiedGradPsiRatio(), put in a check
    for very small electron velocity.  It was causing a division by
    zero and crashing calculations.

Mon, 22 May 2006 Amos Anderson
1.	Fixed a bug in gamess2qmcbeaver.py. It was mistakenly identifying
	bohr geometries as angstroms.

Mon, 16 May 2006 Amos Anderson
1.	I changed how IeeeMath checks for NaN.

2.	I cleaned a bunch of the non-source files.

Mon, 15 May 2006 Amos Anderson
An important note. There are quite a few changes here, many are "here to stay"
while others will be removed eventually. There are 3 significant changes: future
walking, nuclear forces, and system signalling. While the code seems to be working
well for me on all the systems that I've tried, I would say that this code should
be called "experimental", but because the vast majority of this code is close to
what it will eventually look like, in committing it to cvs, I don't want to create
a different branch that will be difficult to merge later. Instead, I've tagged all
the source files with "may_15_2006" in case you want to get the code as it was
before all these changes.

1.	In CubicSpline, the intitializers now use Array1D array copying.
	Also, added an integrate function.

2.	In LU.cpp, determinant_and_inverse changed the static arrays to
	the regular storage class since the static arrays caused problems
	when inverting matrices of different dimensions.
	
3.	Improved error handling in QMCConfigIO. Also, fixed a bug wrt when
	the files were opened in the course of a wavefunction optimization.

4.	QMCDerivativeProperties now uses the Future Walking KE and PE so
	that it produces several virial ratios.
	
5.	QMCFlags just gives a warning if it gets a flag it doesn't know
	about. It used to exit.
	
6.	QMcBeaver can now process some system signals! Previously, a QMcBeaver
	process would crash if it ever received a signal from the system. Now,
	by default as set in QMcBeaver.cpp, it will trap SIGUSR1 and signal 40.
	If SIGUSR1 is sent to a QMcBeaver process, it will immediately seek to
	reduce the calculation data across all processes, and then print all that
	info as if the calculation were actually done, except that it will then
	resume where it left off. The point is that many batch systems can be set
	to send a signal of your choice to your process a short time before it
	sends a SIGKILL, which can not be trapped. I set up the code so that
	SIGUSR1 will reduce, and signal 40 will increase max_time_steps. For example,
	you could send a SIGUSR1 (using the command "kill") and if you think it
	needs more time, then you could send a signal 40. QMcBeaver will
	also trap SIGTERM, which does the same as SIGUSR1 except that in addition
	it quits.
	
7.	I generalized a bit of code out of the synchronize_dmc_ensemble section of
	QMCManager.cpp with the intention of letting the output always have new
	data to show, regardless of whether we've had a reduction since the last
	output. Similarly, QMcBeaver no longer exits if
	mpireduce_interval < output_interval; it just gives a warning.

8.	I removed Eave+Estd and Eave-Estd from the output.

9.	There were some bug fixes in QMCProperties and QMCProperty with respect
	to MPI_reduce. As noticed by Chip, they used to ignore the len parameter
	in their Reduce_Function. This has been fixed. Previous calculations
	in which a reduction was performed over an array of QMCProperties
	(e.g. in QMCManager::gatherDensities and
	QMCReadAndEvaluateConfigs::MPI_reduce) were therefore flawed since it
	was only actually reducing over the first element of the array. Fixing
	this problem introduced a new problem -- the size of QMCProperties::MPI_TYPE
	and QMCProperty::MPI_TYPE were wrong, meaning that a reduction over an
	array would fail for any element after the first element because MPI
	didn't know where each element actually began. This has been fixed, and
	the parallel code now runs on borg/matrix (LAM/MPI), my OSX laptop (LAM/MPI),
	and LANL QSC (its own MPI?), but I'd appreciate an independent
	verification since i'm really green when it comes to MPI...
	
10.	QMCProperty now uses memcpy in operator = ( const QMCProperty & rhs ). This
	was a slight performance improvement. QMCProperty is now a bit more intelligent
	about writing out its data.
	
11.	QMCRun will now kill the program if all the walkers die or if getWeights() <= 0.

12.	I am now including my future walking code. For any observable that
	does not commute with the Hamiltonian (e.g. KE, PE, forces) the property
	has a much larger measurement error. Future walking can correct for this problem
	using (for example) an algorithm described by Casulleras and coworkers in
	Phys. Rev. B, Vol 52, pg 3654. This algorithm requires a choice for "block length".
	A new flag was added to QMCFlags permitting specification of a series of block
	lengths to use. A future walking block length 0 is exactly equivalent to
	no future walking used, and I'm planning on removing KE and PE from QMCProperties
	once i'm more confident. I have set up the code to always include a 0 block
	length, which means that i'm not planning on having any way to turn future walking
	"off". If you don't want it to spend time there, then just don't use any other fw
	block lengths.
	I'll write more about future walking in the manual.
	Also, QMCWalker has some superfluous variables and calculations that I'll remove
	eventually. Specifically, the code will measure r^2 and r_{12} -- useful for validating
	future walking using Helium.
	
13.	This upload includes my nuclear force code using the method described by Chiesa and
	Ceperley in Phys. Rev. Lett., vol 94, 036404. Simone graciously provided me with
	his fortran code, and I have done my best to implement it in QMCNuclearForces,
	but I have not completely validated my "port" yet. I'll write about this in the
	manual when I have a better feel for parameters etc. I have not worked out all
	the details wrt EquilibrationArray yet (it calls assert(0) if both parameters
	are used).

14.	Stopwatch will write out the times in hours as well as milliseconds. It also
	uses long long to store its data.

15.	I added some functions to Array1D so that it looks a little more like std::vector.
	I also made some of its functions const. We should really make an effort to use
	const wherever it is applicable...
	
16.	I set some of Array2D's functions to const. I also fixed a bug in Array2D which
	confused transposed and non-transposed matrices during matrix multiplication.

17.	I've added some commentary to QMCFlags.h. I've pasted this commentary into the
	manual too.
	
18.	I moved QMCWalkerData out of QMCFunctions and into its own file.

19.	I have updated the make system to include making all the help files. This includes
	both the doxygen files as well as the beaver.tex manual.

20.	I've substantially changed the pbsqmcbeaverrun.py script.


Wed, 26 April 2006 Amos Anderson
1. Put the LU code back into Array2D

Mon, 24 April 2006, Daniel R. Fisher
1. Improved QMCElectronNucleusCusp and
   QMCElectronNucleusCuspParameters to fix some problems that came up
   in calculations.

Sun, 16 April 2006, Daniel R. Fisher
1. Made some changes to the addition and multiplication operations in
   QMCGreensRatioComponent to avoid some numerical errors that were
   happening.  

Wed, 15 March 2006, Daniel R. Fisher
1. Moved the function that randomly generates and evaluates initial
   electronic configurations for the walkers from QMCWalker to QMCRun.
   This way, there is only one QMCInitializeWalker object, which is
   used to generate the initial configurations for the entire
   ensemble.  The initial configurations are evaluated by the
   QMCFunctions that is already in QMCRun.  Previously, each walker
   had its own QMCInitializeWalker and QMCFunctions to do this. 

Tues, 14 March 2006, Daniel R. Fisher
1. Added two classes, QMCElectronNucleusCusp and
   QMCElectronNucleusCuspParameters, which replace Gaussian orbitals
   with exponential functions near the nuclei.  The replacement
   functions satisfy the electron nucleus cusp conditions and match
   the value and first and second derivatives of the original orbital
   at the radius of correction.  To use this feature, set the flag
   replace_electron_nucleus_cusps to 1 and set all the electron
   nucleus Jastrow types to "None."

Mon, 13 Mar 2006, Chip Kent
1. Fixed a bug in the MPI type created for Stopwatch.  MPI_LONG_INT
   is a struct containing a long and and int not a long int.  This was
   changed to MPI_LONG which is a long int.

2. Changed a strcpy to strncpy in QMCManager::sendAllProcessorsInputFileName
   to avoid any chance of stack crashing attacks using QMcBeaver.

3. Added support for Open-MPI.

4. Fixed a bug in Stopwatch.h which prevented the file from building
   properly on Linux.

5. Disabled long double warning messages from GCC.

Mon, 16 Jan 2006, Amos Anderson
I committed many changes that I had made over the last several months.
1. QMCRun now keeps one copy of QMCFunctions, meaning that QMCWalker's
   initializeWalkerPosition does not have to create one. This is simply
   to save a bit of memory...

2. I added the NaN check x+1==x to IeeeMath, and modified QMCWalker to
   reflect this.
   
3. I added the GPUQMCJastrowElectronElectron class that I had written. To
   program this, I had to modify the abstract QMCCorrelationFunction class
   to force all correlation function classes to allow other classes to query
   the polynomial coefficients. The JuliusCorrelationFunction is not compatible
   with what I've programmed. Changes were made to QMCJastrow.
   
4. I changed Array2D so that many of its functions are now in a separate file
   called Array2D.cpp. I also modified it so that it itself computes the inverse
   and determinant.
   
5. I changed how QMCSlater is arranged. I wanted to let QMCFunction choose when
   it wanted the determinant/inverse computed relative to when the matrices were
   multiplied. This permits the GPU to get started on some work, letting the CPU
   do some other stuff before wrapping up the calculation.
   
6. QMcBeaver can now run CPU calculations and GPU calculations simultaneously. That is,
   I can tell it to calculate a certain number of walkers on the GPU, and the rest
   of the walkers from the walkers_per_pass parameter get processed on the CPU. This
   is my attempt at balancing the CPU and the GPU, and is related to #5 above.

7. I monkeyed with the Stopwatches class. Its internal storage is now in microseconds
   instead of milliseconds. This helps preserve some of the information. I don't
   think I had the Windows/Cygwin compatibility quite finished.

Wed, 7 Dec 2005, Daniel R. Fisher

1. Modified the way that the electron density histograms are collected
   so that only one file is written out, instead of one for every
   processor.  The histograms are now collected at the MPI_Reduce
   interval and written out by the root processor.  
2. Changed the way that the multiconfiguration trial functions are
   created.  In the output of a GAMESS MCSCF calculation, the CI
   expansion does not correspond to the orbitals written in the data
   file.  To get the right coefficients, run a calculation with
   SCFTYP=NONE and CITYP=ALDET with the natural orbitals of a
   converged MCSCF calculation as the read in $VEC.  Then run
   gamess2qmcbeaver.py on the output of the CI calculation.

Wed, 16 Nov 2005, Amos Anderson
1. Modified the way configuration files are handled. It is all handled by
   a new class, QMCConfigIO, which allows you to choose whether it is
   output in text mode or in binary. There is a flag in QMCConfigIO.cpp
   where this setting is chosen.

Mon, 7 Nov 2005, Chip Kent

1. Modified the release creation script to generate the user guide in 
   addition to the API guide.

Thurs, 20 Oct 2005, Daniel R. Fisher

1. In the case of multideterminant trial wavefunctions,
   QMCDansWalkerInitialization now decides which determintant to use
   when distributing the electrons among the nuclei based on the CI
   expansion coefficients.
2. The electron nuclear and electron electron components of the
   potential energy are now recorded separately, in addition to the
   total potential energy.
3. Submitted, on behalf of Julius Su, changes that make it possible to
   use a "mean field" potential, in which the electron positions are
   averaged over several walkers.  This was written for use in DFT
   development.  To use this, use "None" for all correlation function
   types and set the flag "use_hf_potential" to 1.
4. There is a new option called "lock_trial_energy" which fixes the
   trial energy at its initial value in DMC calculations.

Fri, 23 Sep 2005, Daniel R. Fisher

1. Fixed a memory leak in QMCJastrowElectronNuclear.cpp

Wed, 21 Sep 2005, Daniel R. Fisher

1. Added the capability to calculate one electron density in
   addition to electron pair density histograms.  To calculate all
   electron densities, set the write_electron_densities flag to 1.
   This replaces the write_pair_densities flag.
2. Changed the way the histograms are normalized when they are written
   out.
3. Added the capability to use unrestricted trial functions in the SCF
   part of the wavefunction.  Unrestricted trial functions can be
   generated with Jaguar or GAMESS.  This will result in a .ckmf file
   in which the alpha and beta orbitals have different coefficients.
   The old input files can still be used. 

Wed, 14 Sep 2005, Daniel R. Fisher

1. Fixed a sign error in FixedCuspPadeCorrelationFunction.cpp

Thurs, 8 Sep 2005, Daniel R. Fisher
1. Changed the way that the distances for the pair density histograms 
   are written.  Previously, the bins were labeled by their greatest
   distance, which caused problems at small distances.  Now, they are
   labeled by their midpoint.

Thurs, 8 Sep 2005, Amos Anderson
1. I submitted all my GPUQMC code. So far, it only works on Windows
   with Visual Studio or cygwin. Use --gpu with configure.py and look
   at the lib/README for library set up guides.
2. Several more classes have the "streaming" capability. This includes
   QMCJastrow and QMCPotential_Energy.
3. The code can now use LAPACK to calculate the inverse, but it does not
   add much improvement. Use --lapack with configure.py.
4. I changed the MPI constants in QMCRun.h to be prefixed with QMC_ because
   the other ones were conflicting with something in the Windows API.
5. For compatibility with Intel's Vtune's Call Graph, configure.py now
   accepts --vtune. This sets profiling parameters to emulate Visual
   Studio's /fixed:no.
6. There are several vtune identified performance enhancements. Most of
   them were simply moving memory allocations outside of loops.
7. Two new flag parameters were added. The WALKERS_PER_PASS is now,
   appropriately, an input parameter. In addition, I added a flag whereby
   we (programmers) can quickly test different inputs via the input file.
   The programmersLongs will allow you to enter any number of longs. I'll
   upload a couple scripts I wrote to take advantage of this.
8. I fixed a small bug in the Makefile which was causing it not to compile
   optimized code!!!
9. I added an atexit hook in QMcBeaver.cpp which I use to call getchar()
   under Windows.
10.QMCSlater no longer performs all it's calculations upon a call to
   evaluate(). It divides the time between evaluate (setup) and update_Ds
   (actual calcs) to allow QMCFunction the ability to better schedule the
   processor. This makes a difference for GPUQMC.
11.I used the sourceforge project astyle to format most of the code I
   submitted. The most important change is that it replaced tabs with
   spaces, allowing the code to look decent on any editor, not just
   emacs.
12.I added another isNaN check to QMCWalker. Somehow the GPU was creating
   NaN's not identified by isnan or isinf.

Thurs, 25 Aug 2005, Daniel R. Fisher
1. Added the capability to synchronize the ensemble in DMC
   calculations.  If this option is used, the global properties are
   sent to every node and used for weighting the walkers, determining
   the effective time step, and determining the trial energy.  To use
   it, set the flag synchronize_dmc_ensemble to 1 and
   synchronize_dmc_ensemble_interval to the interval at which the
   global properties are to be collected and sent to all the nodes.

2. Added the capability to calculate pair densities for DFT
   development.  If this option is used, the distance between each
   pair of electrons is calculated and recorded in parallel and
   opposite spin histograms.  To use it, set the flag
   write_pair_densities to 1.  The histograms are written out at the
   interval specified by the flag write_pair_densities_interval.  

Thurs, 23 June 2005, Daniel R. Fisher
1. Changed the criterion in QMCEquilibrationArray for determining the 
   equilibration length from the serially decorrelated standard deviation to an
   objective function involving the expectation value of the energy, its 
   serially correlated variance, and the number of samples.

2. Fixed a problem in QMCDansWalkerInitialization which was sometimes causing
   uneven distributions of electrons.

Tue, 10 May 2005, Amos Anderson
1. Committed my code for a streaming version of QMCFunction with all
   necessary correlary changes.
   This modification actually makes the code a little bit faster --
   more so with more walkers.
   This also adds a new macro WALKERS_PER_PASS.

2. I added some QMcBeaver compiling discussion to beaver.tex. I also
   cleared up some citations.

3. I replaced QMcPlot1.py and QMcPlot2.py with PlotQMc1.py and
   PlotQMc2.py so the first couple
   characters is not the same as the executables.

4. Made a couple minor changes to the make system. configure.py will
   accept a TAG argument, necessary
   for 'make updateall', which performs a batch build for all exec's
   sharing the TAG. I chose this
   instead of the compiler name because many different processors have GCC.

Mon, 2 Apr 2005, Chip Kent

1. Rewrote configure.py to make it easier to maintain and extend.  

2. Made changes necessary to support PGI and Intel compilers.

3. Made changes to remove all warnings about using deprecated STL
   code.

Sat, 12 Mar 2005, Daniel R. Fisher

1.  I moved the (lnJ == 0) check in QMCReadAndEvaluateConfigs from after the 
    local energy and logweight are calculated to after the config is read from
    the file.  This keeps the extra configs from being evaluated. 

Fri, 11 Mar 2005, Daniel R. Fisher

1.  Fixed the jaguar2qmcbeaver.py script.  It was not printing the CI
    coefficients, so they were being initialized with garbage values.

2.  Made some of the arrays in QMCDansWalkerInitialization static.
    This makes the initialization faster.

3.  Added the capability to calculate the expectation values of the
    basis functions.  To do this, set the calculate_bf_density flag to 1.

Tues, 8 Mar 2005, Amos Anderson
1.  I upgraded Stopwatch.h so it now uses Microsoft's high precision
    QueryPerformanceCounter and QueryPerformanceFrequency timing
    functions. The precision is now at the 1 ms resolution when the
    USE_HIGH_PRECISION tag is defined (on by default).

Thurs, 3 Feb 2005, Amos Anderson
1.  I toyed with the makefiles, removing some mistakes/bugs and
    beautifying. They are now really cool.
    I added a new target "updateall" which will update all the
    executables simultaneously.

Tues, 1 Feb 2005, Amos Anderson
1.  Changed some of the behavior of configure.py. Now, you can easily
    keep all the objective files for several different Makefile.config
    choices. e.g. serial debug objective files are seperate from
    parallel debug files are separate from serial atlas debug
    files. Also, I changed the naming of the executable files so you
    can tell some of the options they were compiled with just by
    looking at the name. Not sure if i need to modify this to make
    sure it stays under 16 characters...

2.  Added numerical stability checks to QMCGreensRatioComponent.cpp,
    QMCBasisFunction.cpp, and QMCFunctions.cpp. The code now runs on
    LANL's QSC with or without ATLAS, on H2O, He, HMX.
    Note: according to the ATLAS website errata, the ATLAS library can
    not be threaded on Dec Alphas...
    I don't know how serious that is...

Thurs, 30 Dec 2004, Daniel R. Fisher

1.  Added a << function to Array3D.h so that the program would compile on QSC.


Tues, 23 Dec 2004, Amos Anderson
(note! i have not tested these changes anywhere but my G4 laptop. i'll
do that soon)
1.  Modified Dan's multi-determinant specific changes. With a small
    commenting flip in QMCWavefunction.cpp, the new QMcBeaver can read
    the old input files.

2.  Added some of the example files i've been using for
    profiling. This is purely for convenience. Namely, my convenience
    in finding them again.
3.  Now that I understand the derivative ratio calculations better, I
    discovered that when calculating the transpose of inverse of the
    Slater matrix (a minor index switch) then creating the derivative
    ratios becomes a dot product.
4.  ATLAS capabilities have now been added. Besides adding the
    required BLAS like interface, all matrix-matrix multiplication
    math in QMcBeaver is now fully moved into Array2D.h. Choosing
    whether to use ATLAS or not is handled by configure.py. ATLAS only
    makes a difference for larger molecules. A new lib directory to
    CVS to hold the required libraries with some instructions on how
    to install them. I also added the required header files to CVS for
    convenience.

    Just some notes on compiling ATLAS:
    Compiling ATLAS on cygwin went perfectly.
    Compiling ATLAS on OSX required me to compile a new GNU compiler
    (non-Apple modified)
    Compiling ATLAS on Linux P3 (wolfs) went perfectly.
    Compiling ATLAS on Irix (origin) failed. I have not tried the
    online precompiled version.

    Dan did the matrix-vector multiplication transformation to
    matrix-matrix multiplication as well as some key streamlining
    modifications in QMCBasisFunction.cpp and QMCSlater.cpp.

    The chosen solution for the multideterminant wavefunction matrix
    multiplication is as follows. The Slater matrix is dynamically
    composed before each multiplic ation using memcpy. I read that
    memcpy is only 3 lines in assembly, so it should be fast...
    This means that the multideterminant QMcBeaver requires very
    little additional memory above the old version.

5.  Array1D now has some of its methods implemented in ATLAS.

6.  I replaced some of the code in Array1D and Array2D to have them
    use some of the C memory functions (e.g. memset). This probably
    helps.

7.  I have the code read in WF.Coeffs as the transpose of what it was
    before.  That is, nOrbitals is now the first dimension instead of
    nBasisFunctions.  This required very minor modifications in 2 of
    the initialization schemes.  Although ATLAS doesn't care whether
    multiplying a transpose or not, in princple hand-coded versions
    are faster?

8.  There were some type-casting warnings in several places of code I
    decided annoyed me enough to do the casting explicitly.

9.  I modified QMCJastrowElectronElectron.cpp and
    QMCJastrowElectronNuclear.cpp with a very minor optimization.

10. Some profiling results. With ATLAS on the HMX molecule, QMcBeaver
    is approximately 4 times faster on my G4 laptop, and uses about 10
    mb memory. The streamlining non-ATLAS version is about 2 times
    faster.

Tues, 14 Dec 2004, Daniel R. Fisher

1.  Updated the .ckmf files for the test and example calculations to
    have the new wavefunction format.  Also added two multideterminant
    calculations to the examples.  


Wed, 8 Dec 2004, Daniel R. Fisher

1.  Fixed the gamess2qmcbeaver.py script to handle MCSCF geometry
    optimizations.

2.  Changed the comments in the parts of the code that deal with the
    wavefunction to include multideterminant wavefunctions.


Thurs, 2 Dec 2004, Daniel R. Fisher

1.  Implemented multi determinant wavefunctions for the SCF part of
    the trial function.  The most substantial changes are in QMCSlater
    and QMCFunctions.  MSCSF trial functions can be calculated using
    GAMESS with CANONC=.FALSE. in the $MCSCF section.


Wed, 27 Oct 2004, Amos Anderson

1) fixed a bug in Array2D.h in the matrix-matrix multiply function

2) finally submitted all the changes necessary to run QMcBeaver on
   Windows. I also added a folder "windows" in the top directory
   containing Visual Studio project files. I tried my best to make
   sure that all the paths in those files are relative...
   The project files will run the simple
   ..\examples\H2_hf_631Gss-vmc.ckmf example I also added. To change
   which input file to use, change the entry in the menu bar at
   Project/QMcBeaver/Properties/Configuration
   Properties/Debugging/Command Arguments

  *note: I spent some time trying to force Visual Studio to make the
  CVS code format nicely.
  There is a significant discrepancy between how VS and Emacs
  interpret tabs in the code. I tried to make as few formatting
  changes possible so as not to mess up the code for everyone else...


Sat, 16 Oct 2004, Daniel R Fisher

1. Fixed the comments in the AngleDistributions, RadialDistributions,
   Array1D, 
   QMCDansWalkerInitialization, QMCEquilibrationArray,
   QMCExtendedProperties, QMCGreensRatioComponent, QMCProperties,
   QMCProperty, QMCRun, and QMCWalker classes to work with the JavaDoc
   documentation.

Thr, 14 Oct 2004, Chip Kent

1. Improved the output formatting.  For some cases, the columns of 
   numbers would run together.

2. Added Doxygen documentation to the files generated for a release.

3. Added support for GCC 3.4.

Wed, 13 Oct 2004, Chip Kent

1. Improved the script to build official releases so that it appends the
   version number to the directory.

2. Added an example input file directory with a few entries.

Wed, 8 Sept 2004, Daniel R. Fisher

1.  In the constructor function for QMCWalker, set the trial step
    size, dR2, to 0.  It was being used uninitialized and causing
    problems with the calculation of the effective time step.

2.  In QMCManager::writeEnergyResultsSummary(ostream & strm), added
    the total number of samples collected to the results summary.

3.  In QMcBeaver.cpp, added a Total Samples heading for the column
    with the total number of samples in the global results.


Mon, 30 August 2004, Daniel R. Fisher

1.  Got rid of the need to read the distributions from files in
    QMCDansWalkerInitialization by using CubicSplines.  The resulting
    method is much faster.  The distributions are now stored in the
    AngleDistributions and RadialDistributions classes.


Mon, 30 August 2004, Daniel R. Fisher

1.  Changed configure.py to include settings for the cray_x1 computer.

2.  Added the class QMCGreensRatioComponent.  The Greens function
    calculations were causing numerical overflow problems for large
    molecules.  This class keeps track of a quantity of the form
    k*a^b*exp(c), which is the form of the Greens function components
    in the importance sampling parts of the code.


Thurs, 29 July 2004, Chip Kent

1. Included Amos Anderson's changes to improve the formatting of the
   output.  These changes make the output much easier to read.


Thurs, 29 July 2004, Chip Kent

1. Included Amos Anderson's changes to the build procedure.  These
   changes make it possible to remove the annoying src/Makefile.dep
   file which constantly changes in CVS.  In addition, the new build
   procedure makes it possible to build for multiple systems using the
   same code base.


Wed, 21 July 2004, Daniel R. Fisher

1.  Submitted changes on behalf of Amos Anderson fixing
    calculateReverseGreensFunctionUmrigar93ImportanceSampling() in
    QMCWalker.  The distances were being calculated from the proposed
    positions instead of the original positions, which was causing a
    very high acceptance probability.  


Thurs, 15 July 2004, Daniel R. Fisher

1.  Changed the call to isnan() in QMCEquilibrationArray to come from
    the IeeeMath class instead of <math.h>.  The previous function was
    not compiling on some systems.


Fri, 9 Jul 2004, Daniel R. Fisher

1.  Added QMCEquilibrationArray.  This defines an array of
    QMCExtendedProperties objects, each of which consists of a
    QMCProperties object and equilibration and propagation
    Stopwatches.  The ith element of the array starts collecting
    statistics on the (2^i)th iteration of the run.  When the
    properties are gathered, the element of the array with the
    smallest standard deviation for the total energy is chosen and
    sent to the root processor.  
    When the timing information is collected, the propagation and
    equilibration timers from the appropriate QMCExtendedProperties
    object are added to the localTimers and sent to the root
    processor.
    When correlated sampling configurations are read, each processor
    determines how many configurations from the beginning of the file
    should be skipped.  
    To use the equilibration array, set the flag
    use_equilibration_array to 1.


Wed, 7 Jul 2004, Daniel R. Fisher

1.  Added QMCDansWalkerInitialization.  This initialization method
    requires very few equilibration steps before statistics can be
    gathered.  To use it, set the walker_initialization_method flag to
    dans_walker_initialization and copy radial_dist_arrays and
    angle_dist_arrays from the QMcBeaver/src directory into the
    working directory.
    As part of this method, I added some quaternion operations for
    calculating rotations to Array1D.h.

2.  Added an equilibration Stopwatch to QMCStopwatches.  The time spent
    equilibrating the chain is now referred to as "equilibration time"
    and is recorded by the equilibration Stopwatch.  The Stopwatch
    that used to record this time was called the initialization
    Stopwatch.  This Stopwatch now records the time spent generating
    initial configurations.


Thu, 1 Jul 2004, Daniel R. Fisher

1.  In QMCManager and QMCFlags, made sure the iseed is always a
    negative integer whenever an input, restart, or checkpoint file is
    written or read.
    When writing restarts and checkpoints, -1*iseed is written out if
    iseed is positive.  The value of iseed itself is not changed.
2.  In QMCManager, fixed the conditional statement for writing out
    correlated sampling configurations.  Now it writes out
    configurations at the proper interval.