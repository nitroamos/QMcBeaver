This README discusses some issues about using ATLAS and GPUs.

**********************************************************
ATLAS related:
This directory is meant to hold the ATLAS libraries libatlas.a and libcblas.a.
(Perhaps it would be a good idea to provide the P3 Linux library common
to the wolfs/matrix/borg? for now, they're in my amosa@wag directory.)

To get these two libraries, you need to either find a precompiled
version online, or compile it from source yourself because then
you can get the most up to date version. There are some standard
places you could look for precompiled libraries:
https://sourceforge.net/projects/math-atlas/
http://www.netlib.org/atlas/archives/

To compile the ATLAS library:
1) get the source from https://sourceforge.net/projects/math-atlas/
2) follow it's instructions for compiling the library (they're easy).

If it has some settings for your CPU already, then the build should be
under 1 hr. On my P4 computer, it took around 45 minutes. If it doesn't
have settings for you (or you want it to refigure the settings out),
it can take upwards of 5 or 6 hours (on my OSX G4 laptop) because
it tunes each function. if you do compile on OSX, you'll need to download
and compile a fresh GNU compiler (the Apple modified ones don't work for
some reason. it would actually be quicker to use the later-discovered vecLib framework)

3) find the required libraries and plop them in this folder.
the header files are standard and included in the QMcBeaver CVS.

To run with ATLAS:
1) select the --atlas option from the configure.py script.
2) if you do not want to run with ATLAS, don't select the --atlas option
and the makefiles will NOT search for the 2 libraries.

If compiling with Visual Studio, your library will need:
C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
cblas.lib
lapack.lib
atlas.lib

**********************************************************
LAPACK related:
This directory needs the
liblapack.a

Which can be built with ATLAS. It is only used for inverting
small, dense matrices -- and it does not seem to make much difference...

**********************************************************
GPU related: (Linux not included yet)

There is a significant amount of library/dll setup that needs to happen
to run GPUQMC. I hope this information is sufficient... Website references
are at the bottom. I have only tried this on an nVidia GPU, I don't know if
this code will run on an ATI GPU. It might, but it's precision is probably
completely unacceptable as far as QMcBeaver accuracy is concerned.

**To compile the code under Cygwin:
1) You'll need to install the packages freeglut and opengl on top of
the base installation. This is done through cygwin's setup.exe utility.

2) You will need the latest Windows GPU driver.

3) You'll need to download the Cg Toolkit and glew. You probalby need to
run the Cg Toolkit installation file cause it might sprinkle dll's around.
Place the following libraries in the QMcBeaver/lib/ directory:
cg.lib
cgGL.lib
glew32.lib
glew32.dll

4) You'll need to copy some of the Cg header files into QMcBeaver/include/.
Instructions are in the README in that directory

5) Include the --gpu flag when running configure.py

**To compile the code under Visual Studio:

1) You'll need to download the Cg Toolkit. The Cg Toolkit
has an installation utility -- run it. This should place all the required
Cg header files in:
C:\Program Files\NVIDIA Corporation\Cg\include
The Visual Studio project files included with QMcBeaver look here.

2) Download glew. Installation instructions are included on their website.

3) Download glut. Installation instructions are included on their website.

4) You will need the latest Windows GPU driver.

5) In the end, your directories should look similar to:
C:\WINDOWS\system32
glew32.dll
glu32.dll
glut32.dll

C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\include\GL
(it's possible that not all of these are needed...)
gl.h
glew.h
glut.h
glext.h
glxew.h
wglew.h
wglext.h

C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\lib
glew32.lib
glut32.lib

6) The Visual Studio QMcBeaver project file has several configurations
set up, one of them will compile GPUQMC.

>>>>>>>>GPU website references<<<<<<<<
The Cg Toolkit is available here:
http://developer.nvidia.com/object/cg_toolkit.html
NOTE: as of this writing, Cg 1.4 does not work. I've been told they fixed
the bug I told them about, but that bug fix has not been released yet.
So, you'll need to get Cg 1.3.

GLEW is available here:
http://glew.sourceforge.net/

GLUT is available here:
http://www.xmission.com/~nate/glut.html

nVidia Drivers are available here:
http://www.nvidia.com/content/drivers/drivers.asp
You'll probably need at least version 7676 (Linux) or 7718 (Windows) for the
GL_EXT_framebuffer_object extention's capabilities.